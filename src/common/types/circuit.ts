// using ids for connections to allow for easier serialization and deserialization

export type CircuitElement = {
  id: string;
  x: number;
  y: number;
  nodes: Node[];
  type: string;
  properties?: {
    voltage?: number; // for power sources like batteries
    resistance?: number; // all components can have resistance
    maxResistance?: number; // for variable components like potentiometers
    minResistance?: number; // for variable components like potentiometers
    mode?: "voltage" | "current"; // for multimeters, can be voltage or current mode
  };
  computed?: {
    current?: number; // computed current through the element
    voltage?: number; // computed voltage across the element
    power?: number; // computed power consumed or generated by the element
    measurement?: number; // Specific reading for multimeter
  };
};

export type Wire = {
  toNodeId: string;
  fromNodeId: string;
  id: string;
  resistance?: number;
  color?: string; // Optional color for the wire
};

export type Node = {
  id: string;
  x: number;
  y: number;
  parentId: string;
  polarity?: "positive" | "negative"; // Optional polarity for the node
};

export type Size =
  | { width: number; height: number; radius?: never }
  | { radius: number; width?: never; height?: never };

export type EditingWire = {
  wireId: string;
  end: "from" | "to";
};

export type CircuitElementProps = {
  type: string;
  idNumber: number;
  pos: { x: number; y: number };
  properties?: {
    resistance?: number;
    voltage?: number;
    maxResistance?: number;
    minResistance?: number;
  };
};

export type PaletteElementType =
  | "lightbulb"
  | "battery"
  | "resistor"
  | "multimeter"
  | "potentiometer"
  | "led";
